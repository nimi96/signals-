{
  "_args": [
    [
      {
        "raw": "mqtt-connection@^3.0.0",
        "scope": null,
        "escapedName": "mqtt-connection",
        "name": "mqtt-connection",
        "rawSpec": "^3.0.0",
        "spec": ">=3.0.0 <4.0.0",
        "type": "range"
      },
      "C:\\traffic\\traffic_app\\node_modules\\mqtt"
    ]
  ],
  "_from": "mqtt-connection@>=3.0.0 <4.0.0",
  "_id": "mqtt-connection@3.1.0",
  "_inCache": true,
  "_location": "/mqtt-connection",
  "_nodeVersion": "6.10.1",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/mqtt-connection-3.1.0.tgz_1494854622451_0.8400822044350207"
  },
  "_npmUser": {
    "name": "matteo.collina",
    "email": "hello@matteocollina.com"
  },
  "_npmVersion": "4.5.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "mqtt-connection@^3.0.0",
    "scope": null,
    "escapedName": "mqtt-connection",
    "name": "mqtt-connection",
    "rawSpec": "^3.0.0",
    "spec": ">=3.0.0 <4.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "https://registry.npmjs.org/mqtt-connection/-/mqtt-connection-3.1.0.tgz",
  "_shasum": "c3547f99445e218d922c48c4beaec1b8c0806980",
  "_shrinkwrap": null,
  "_spec": "mqtt-connection@^3.0.0",
  "_where": "C:\\traffic\\traffic_app\\node_modules\\mqtt",
  "bugs": {
    "url": "https://github.com/mqttjs/mqtt-connection/issues"
  },
  "contributors": [
    {
      "name": "Matteo Collina",
      "email": "matteo.collina@gmail.com",
      "url": "https://github.com/mcollina"
    },
    {
      "name": "Adam Rudd",
      "email": "adamvrr@gmail.com"
    }
  ],
  "dependencies": {
    "duplexify": "^3.4.5",
    "inherits": "^2.0.3",
    "mqtt-packet": "^5.2.0",
    "safe-buffer": "^5.0.1",
    "through2": "^2.0.1"
  },
  "description": "Stream-based Connection object for MQTT, extracted from MQTT.js",
  "devDependencies": {
    "mocha": "^3.1.0",
    "should": "^11.1.0",
    "standard": "^10.0.0"
  },
  "directories": {},
  "dist": {
    "shasum": "c3547f99445e218d922c48c4beaec1b8c0806980",
    "tarball": "https://registry.npmjs.org/mqtt-connection/-/mqtt-connection-3.1.0.tgz"
  },
  "gitHead": "8da8f33e2353666ef7581425bb66706f03df9342",
  "homepage": "https://github.com/mqttjs/mqtt-connection",
  "keywords": [
    "mqtt",
    "connection",
    "server"
  ],
  "license": "MIT",
  "main": "connection.js",
  "maintainers": [
    {
      "name": "matteo.collina",
      "email": "hello@matteocollina.com"
    }
  ],
  "name": "mqtt-connection",
  "optionalDependencies": {},
  "readme": "mqtt-connection&nbsp;&nbsp;&nbsp;[![Build Status](https://travis-ci.org/mqttjs/mqtt-connection.png)](https://travis-ci.org/mqttjs/mqtt-connection)\n===============\n\nBarebone Connection object for MQTT.\nWorks over any kind of binary Streams, TCP, TLS, WebSocket, ...\n\n[![JavaScript Style Guide](https://cdn.rawgit.com/feross/standard/master/badge.svg)](https://github.com/feross/standard)\n\nIt uses [mqtt-packet](http://npm.im/mqtt-packet) for generating and\nparsing MQTT packets. See it for the full documentations on the\npacket types.\n\n  * <a href=\"#installation\">Installation</a>\n  * <a href=\"#usage\">Usage</a>\n  * <a href=\"#api\">API</a>\n  * <a href=\"#contributing\">Contributing</a>\n  * <a href=\"#license\">License &amp; copyright</a>\n\nThis library is tested with node v4, v6 and v7. The last version to support\nolder versions of node was mqtt-connection@2.1.1.\n\nInstallation\n-------\n\n```sh\nnpm install mqtt-connection --save\n```\n\nUsage\n-----\n\nAs a client:\n\n```js\nvar net = require('net')\nvar mqttCon = require('mqtt-connection')\nvar stream = net.createConnection(1883, 'localhost')\nvar conn = mqttCon(stream)\n\n// conn is your MQTT connection!\n```\n\nAs a server:\n```js\nvar net = require('net')\nvar mqttCon = require('mqtt-connection')\nvar server = new net.Server()\n\nserver.on('connection', function (stream) {\n  var client = mqttCon(stream)\n\n  // client connected\n  client.on('connect', function (packet) {\n    // acknowledge the connect packet\n    client.connack({ returnCode: 0 });\n  })\n\n  // client published\n  client.on('publish', function (packet) {\n    // send a puback with messageId (for QoS > 0)\n    client.puback({ messageId: packet.messageId })\n  })\n\n  // client pinged\n  client.on('pingreq', function () {\n    // send a pingresp\n    client.pingresp()\n  });\n\n  // client subscribed\n  client.on('subscribe', function (packet) {\n    // send a suback with messageId and granted QoS level\n    client.suback({ granted: [packet.qos], messageId: packet.messageId })\n  })\n\n  // timeout idle streams after 5 minutes\n  stream.setTimeout(1000 * 60 * 5)\n\n  // connection error handling\n  client.on('close', function () { client.destroy() })\n  client.on('error', function () { client.destroy() })\n  client.on('disconnect', function () { client.destroy() })\n\n  // stream timeout\n  stream.on('timeout', function () { client.destroy(); })\n})\n\n// listen on port 1883\nserver.listen(1883)\n```\n\nAs a websocket server:\n\n```js\nvar websocket = require('websocket-stream')\nvar WebSocketServer = require('ws').Server\nvar Connection = require('mqtt-connection')\nvar server = http.createServer()\n\nvar wss = new WebSocketServer({server: server})\n\nif (handler) {\n  server.on('client', handler)\n}\n\nwss.on('connection', function (ws) {\n  var stream = websocket(ws)\n  var connection = new Connection(stream)\n\n  handle(connection)\n})\n\nfunction handle (conn) {\n  // handle the MQTT connection like\n  // the net example\n}\n```\n\nAPI\n---\n\n  * <a href=\"#connection\"><code>mqtt.<b>Connection()</b></code></a>\n  * <a href=\"#parseStream\"><code>mqtt.<b>parseStream()</b></code></a>\n  * <a href=\"#generateStream\"><code>mqtt.<b>generateStream()</b></code></a>\n\n---------------------------------\n\n<a name=\"connection\"></a>\n### new mqtt.Connection([options])\n\nCreates a new MQTT `Connection`.\n\nOptions:\n\n  * `notData`: do not listen to the `'data'` event, so that it can\n    respect backpressure. Pipe the `Connection` to another stream to\n    consume the packets. If this option is passed `true` the object will\n    emit no packet-related events.\n\n#### Connection#connect(options, [callback])\n\nSend a MQTT connect packet.\n\n`options` supports the following properties:\n\n* `protocolId`: Protocol ID, usually `MQIsdp`. `string`\n* `protocolVersion`: Protocol version, usually 3. `number`\n* `keepalive`: keepalive period in seconds. `number`\n* `clientId`: client ID. `string`\n* `will`: the client's will message options.\n`object` that supports the following properties:\n  * `topic`: the will topic. `string`\n  * `payload`: the will payload. `string`\n  * `qos`: will qos level. `number`\n  * `retain`: will retain flag. `boolean`\n* `clean`: the 'clean start' flag. `boolean`\n* `username`: username for protocol v3.1. `string`\n* `password`: password for protocol v3.1. `string`\n\n#### Connection#connack(options, [callback])\nSend a MQTT connack packet.\n\n`options` supports the following properties:\n\n* `returnCode`: the return code of the connack, success is\nindicated by `0`. `number`\n\n#### Connection#publish(options, [callback])\nSend a MQTT publish packet.\n\n`options` supports the following properties:\n\n* `topic`: the topic to publish to. `string`\n* `payload`: the payload to publish, defaults to an empty buffer.\n`string` or `buffer`\n* `qos`: the quality of service level to publish on. `number`\n* `messageId`: the message ID of the packet,\nrequired if qos > 0. `number`\n* `retain`: retain flag. `boolean`\n\n#### Connection#puback #pubrec #pubcomp #unsuback(options, [callback])\nSend a MQTT `[puback, pubrec, pubcomp, unsuback]` packet.\n\n`options` supports the following properties:\n\n* `messageId`: the ID of the packet\n\n#### Connection#pubrel(options, [callback])\nSend a MQTT pubrel packet.\n\n`options` supports the following properties:\n\n* `dup`: duplicate message flag\n* `messageId`: the ID of the packet\n\n#### Connection#subscribe(options, [callback])\nSend a MQTT subscribe packet.\n\n`options` supports the following properties:\n\n* `dup`: duplicate message flag\n* `messageId`: the ID of the packet\n* `subscriptions`: a list of subscriptions of the form\n`[{topic: a, qos: 0}, {topic: b, qos: 1}]`\n\n#### Connection#suback(options, [callback])\nSend a MQTT suback packet.\n\n`options` supports the following properties:\n\n* `granted`: a vector of granted QoS levels,\nof the form `[0, 1, 2]`\n* `messageId`: the ID of the packet\n\n#### Connection#unsubscribe(options, [callback])\nSend a MQTT unsubscribe packet.\n\n`options` supports the following properties:\n\n* `messageId`: the ID of the packet\n* `dup`: duplicate message flag\n* `unsubscriptions`: a list of topics to unsubscribe from,\nof the form `[\"topic1\", \"topic2\"]`\n\n#### Connection#pingreq #pingresp #disconnect(options, [callback])\nSend a MQTT `[pingreq, pingresp, disconnect]` packet.\n\n#### Event: 'connect'\n`function(packet) {}`\n\nEmitted when a MQTT connect packet is received by the client.\n\n`packet` is an object that may have the following properties:\n\n* `version`: the protocol version string\n* `versionNum`: the protocol version number\n* `keepalive`: the client's keepalive period\n* `clientId`: the client's ID\n* `will`: an object with the following keys:\n  * `topic`: the client's will topic\n  * `payload`: the will message\n  * `retain`: will retain flag\n  * `qos`: will qos level\n* `clean`: clean start flag\n* `username`: v3.1 username\n* `password`: v3.1 password\n\n#### Event: 'connack'\n`function(packet) {}`\n\nEmitted when a MQTT connack packet is received by the client.\n\n`packet` is an object that may have the following properties:\n\n* `returnCode`: the return code of the connack packet\n\n#### Event: 'publish'\n`function(packet) {}`\n\nEmitted when a MQTT publish packet is received by the client.\n\n`packet` is an object that may have the following properties:\n\n* `topic`: the topic the message is published on\n* `payload`: the payload of the message\n* `messageId`: the ID of the packet\n* `qos`: the QoS level to publish at\n\n#### Events: \\<'puback', 'pubrec', 'pubrel', 'pubcomp', 'unsuback'\\>\n`function(packet) {}`\n\nEmitted when a MQTT `[puback, pubrec, pubrel, pubcomp, unsuback]`\npacket is received by the client.\n\n`packet` is an object that may contain the property:\n\n* `messageId`: the ID of the packet\n\n#### Event: 'subscribe'\n`function(packet) {}`\n\nEmitted when a MQTT subscribe packet is received.\n\n`packet` is an object that may contain the properties:\n\n* `messageId`: the ID of the packet\n* `subscriptions`: an array of objects\nrepresenting the subscribed topics, containing the following keys\n  * `topic`: the topic subscribed to\n  * `qos`: the qos level of the subscription\n\n\n#### Event: 'suback'\n`function(packet) {}`\n\nEmitted when a MQTT suback packet is received.\n\n`packet` is an object that may contain the properties:\n\n* `messageId`: the ID of the packet\n* `granted`: a vector of granted QoS levels\n\n#### Event: 'unsubscribe'\n`function(packet) {}`\n\nEmitted when a MQTT unsubscribe packet is received.\n\n`packet` is an object that may contain the properties:\n\n* `messageId`: the ID of the packet\n* `unsubscriptions`: a list of topics the client is\nunsubscribing from, of the form `[topic1, topic2, ...]`\n\n#### Events: \\<'pingreq', 'pingresp', 'disconnect'\\>\n`function(packet){}`\n\nEmitted when a MQTT `[pingreq, pingresp, disconnect]` packet is received.\n\n`packet` only includes static header information and can be ignored.\n\n-------------------------------------\n\n<a name=\"generateStream\">\n\n### mqtt.generateStream()\n\nReturns a `Transform` stream that calls [`generate()`](https://github.com/mqttjs/mqtt-packet#generate).\nThe stream is configured into object mode.\n\n<a name=\"parseStream\">\n\n### mqtt.parseStream(opts)\n\nReturns a `Transform` stream that embeds a [`Parser`](https://github.com/mqttjs/mqtt-packet#mqttparser) and calls [`Parser.parse()`](https://github.com/mqttjs/mqtt-packet#parserparsebuffer) for each new `Buffer`. The stream is configured into object mode. It accepts the same options of [`parser(opts)`](#parser).\n\n<a name=\"contributing\"></a>\nContributing\n------------\n\nmqtt-connection is an **OPEN Open Source Project**. This means that:\n\n> Individuals making significant and valuable contributions are given commit-access to the project to contribute as they see fit. This project is more like an open wiki than a standard guarded open source project.\n\nSee the [CONTRIBUTING.md](https://github.com/mqttjs/mqtt-connection/blob/master/CONTRIBUTING.md) file for more details.\n\n### Contributors\n\nmqtt-connection is only possible due to the excellent work of the following contributors:\n\n<table><tbody>\n<tr><th align=\"left\">Matteo Collina</th><td><a href=\"https://github.com/mcollina\">GitHub/mcollina</a></td><td><a href=\"http://twitter.com/matteocollina\">Twitter/@matteocollina</a></td></tr>\n<tr><th align=\"left\">Adam Rudd</th><td><a href=\"https://github.com/adamvr\">GitHub/adamvr</a></td><td><a href=\"http://twitter.com/adam_vr\">Twitter/@adam_vr</a></td></tr>\n</tbody></table>\n\nLicense\n-------\n\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/mqttjs/mqtt-connection.git"
  },
  "scripts": {
    "test": "mocha test/ && standard"
  },
  "version": "3.1.0"
}
