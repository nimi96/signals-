{
  "_args": [
    [
      {
        "raw": "tap-parser@0.7.0",
        "scope": null,
        "escapedName": "tap-parser",
        "name": "tap-parser",
        "rawSpec": "0.7.0",
        "spec": "0.7.0",
        "type": "version"
      },
      "C:\\traffic\\traffic_app\\node_modules\\mqtt\\node_modules\\zuul"
    ]
  ],
  "_from": "tap-parser@0.7.0",
  "_id": "tap-parser@0.7.0",
  "_inCache": true,
  "_location": "/tap-parser",
  "_npmUser": {
    "name": "substack",
    "email": "mail@substack.net"
  },
  "_npmVersion": "1.4.15",
  "_phantomChildren": {
    "core-util-is": "1.0.2",
    "inherits": "2.0.3"
  },
  "_requested": {
    "raw": "tap-parser@0.7.0",
    "scope": null,
    "escapedName": "tap-parser",
    "name": "tap-parser",
    "rawSpec": "0.7.0",
    "spec": "0.7.0",
    "type": "version"
  },
  "_requiredBy": [
    "/zuul"
  ],
  "_resolved": "https://registry.npmjs.org/tap-parser/-/tap-parser-0.7.0.tgz",
  "_shasum": "728a61d64680a5b48d5dbd9dbd0a4d48f5c35bcb",
  "_shrinkwrap": null,
  "_spec": "tap-parser@0.7.0",
  "_where": "C:\\traffic\\traffic_app\\node_modules\\mqtt\\node_modules\\zuul",
  "author": {
    "name": "James Halliday",
    "email": "mail@substack.net",
    "url": "http://substack.net"
  },
  "bin": {
    "tap-parser": "bin/cmd.js"
  },
  "bugs": {
    "url": "https://github.com/substack/tap-parser/issues"
  },
  "dependencies": {
    "inherits": "~2.0.1",
    "minimist": "^0.2.0",
    "readable-stream": "~1.1.11"
  },
  "description": "parse the test anything protocol",
  "devDependencies": {
    "tap": "~0.4.6",
    "tape": "~2.3.2"
  },
  "directories": {},
  "dist": {
    "shasum": "728a61d64680a5b48d5dbd9dbd0a4d48f5c35bcb",
    "tarball": "https://registry.npmjs.org/tap-parser/-/tap-parser-0.7.0.tgz"
  },
  "gitHead": "b80725adc41e9ce88a3a90fac5bc4e714fa8be9f",
  "homepage": "https://github.com/substack/tap-parser",
  "keywords": [
    "tap",
    "test",
    "parser"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "substack",
      "email": "mail@substack.net"
    }
  ],
  "name": "tap-parser",
  "optionalDependencies": {},
  "readme": "# tap-parser\n\nparse the [test anything protocol](http://testanything.org/)\n\n[![build status](https://secure.travis-ci.org/substack/tap-parser.png)](http://travis-ci.org/substack/tap-parser)\n\n[![browser support](http://ci.testling.com/substack/tap-parser.png)](http://ci.testling.com/substack/tap-parser)\n\n# example\n\n``` js\nvar parser = require('tap-parser');\nvar p = parser(function (results) {\n    console.dir(results);\n});\n\nprocess.stdin.pipe(p);\n```\n\ngiven some [TAP](http://testanything.org/)-formatted input:\n\n```\n$ node test.js\nTAP version 13\n# beep\nok 1 should be equal\nok 2 should be equivalent\n# boop\nok 3 should be equal\nok 4 (unnamed assert)\n\n1..4\n# tests 4\n# pass  4\n\n# ok\n```\n\nparse the output:\n\n```\n$ node test.js | node parse.js\n{ ok: true,\n  asserts: \n   [ { ok: true, number: 1, name: 'should be equal' },\n     { ok: true, number: 2, name: 'should be equivalent' },\n     { ok: true, number: 3, name: 'should be equal' },\n     { ok: true, number: 4, name: '(unnamed assert)' } ],\n  pass: \n   [ { ok: true, number: 1, name: 'should be equal' },\n     { ok: true, number: 2, name: 'should be equivalent' },\n     { ok: true, number: 3, name: 'should be equal' },\n     { ok: true, number: 4, name: '(unnamed assert)' } ],\n  fail: [],\n  todo: [],\n  errors: [],\n  plan: { start: 1, end: 4 } }\n```\n\n# usage\n\nThis package also has a `tap-parser` command.\n\n```\nusage: tap-parser OPTIONS\n\n  Parse TAP from INPUT. If there are any failures, exits with\n  a non-zero status code.\n\nOPTIONS are:\n\n  -i, --input    Read from INPUT. Default: stdin.\n  -o, --output   Write to OUTPUT. Default: stdout.\n  -r, --results  Print results as json. Otherwise pass INPUT\n                 through to OUTPUT.\n\n  -h, --help     Show this help message.\n  -v, --version  Print the current version of tap-parser.\n\n```\n\n# methods\n\n``` js\nvar parser = require('tap-parser')\n```\n\n## var p = parser(cb)\n\nReturn a writable stream `p` that emits parse events.\n\nIf `cb` is given it will listen for the `'results'` event.\n\n# events\n\n## p.on('results', function (results) {})\n\n`results.errors` is an array containing any parse errors, such as out of order\nassertions or missing plans.\n\n## p.on('assert', function (assert) {})\n\nEvery `/^(not )?ok\\b/` line will emit an `'assert'` event.\n\nEvery `assert` object has these keys:\n\n* `assert.ok` - true if the assertion succeeded, false if failed\n* `assert.number` - the assertion number\n* `assert.name` - optional short description of the assertion\n\nand may also have\n\n* `assert.todo` - optional description of why the assertion failure is\n  not a problem.\n\nWhen `results` are returned, each `assert` object will have been\nappended to the list `asserts` and one of (`pass`, `fail`, `todo`).\n\n## p.on('comment', function (comment) {})\n\nEvery `/^# (.+)/` line will emit the string contents of `comment`.\n\n## p.on('plan', function (plan) {})\n\nEvery `/^\\d+\\.\\.\\d+/` line emits a `'plan'` event for the test numbers\n`plan.start` through `plan.end`, inclusive.\n\nIf the test is [completely skipped](http://podwiki.hexten.net/TAP/TAP.html?page=TAP#Skippingeverything) the result will look like\n\n```\n{ ok: true,\n  asserts: [],\n  pass: [],\n  fail: [],\n  errors: [],\n  plan: \n   { start: 1,\n     end: 0,\n     skip_all: true,\n     skip_reason: 'This code has no seat belt' } }\n```\n\n## p.on('version', function (version) {})\n\nA `/^TAP version (\\d+)/` line emits a `'version'` event with a version number or\nstring.\n\n## p.on('extra', function (extra) {})\n\nAll other lines will trigger an `'extra'` event with the line text.\n\n# install\n\nWith [npm](https://npmjs.org) do:\n\n```\nnpm install tap-parser\n```\n\nYou can use [browserify](http://browserify.org) to `require('tap-parser')` in\nthe browser.\n\n# license\n\nMIT\n",
  "readmeFilename": "readme.markdown",
  "repository": {
    "type": "git",
    "url": "git://github.com/substack/tap-parser.git"
  },
  "scripts": {
    "test": "tap test/*.js"
  },
  "testling": {
    "files": "test/*.js",
    "browsers": [
      "ie/6..latest",
      "chrome/10",
      "chrome/latest",
      "firefox/3.5",
      "firefox/latest",
      "opera/latest",
      "safari/latest"
    ]
  },
  "version": "0.7.0"
}
